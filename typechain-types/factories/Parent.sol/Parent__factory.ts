/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, BigNumberish, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../common.js"
  import type { Parent, ParentInterface } from "../../Parent.sol/Parent.js";

  const _abi = [
  {
    "inputs": [
      {
        "internalType": "string",
        "name": "_name",
        "type": "string"
      },
      {
        "internalType": "uint256",
        "name": "_balance",
        "type": "uint256"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "inputs": [],
    "name": "getParentInfo",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      },
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "parentBalance",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "parentName",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "sayHello",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "pure",
    "type": "function"
  }
] as const;

  const _bytecode = "0x608060405234801561000f575f5ffd5b506040516108bb3803806108bb833981810160405281019061003191906101ce565b815f908161003f919061042f565b508060018190555050506104fe565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6100ad82610067565b810181811067ffffffffffffffff821117156100cc576100cb610077565b5b80604052505050565b5f6100de61004e565b90506100ea82826100a4565b919050565b5f67ffffffffffffffff82111561010957610108610077565b5b61011282610067565b9050602081019050919050565b8281835e5f83830152505050565b5f61013f61013a846100ef565b6100d5565b90508281526020810184848401111561015b5761015a610063565b5b61016684828561011f565b509392505050565b5f82601f8301126101825761018161005f565b5b815161019284826020860161012d565b91505092915050565b5f819050919050565b6101ad8161019b565b81146101b7575f5ffd5b50565b5f815190506101c8816101a4565b92915050565b5f5f604083850312156101e4576101e3610057565b5b5f83015167ffffffffffffffff8111156102015761020061005b565b5b61020d8582860161016e565b925050602061021e858286016101ba565b9150509250929050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061027657607f821691505b60208210810361028957610288610232565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026102eb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826102b0565b6102f586836102b0565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61033061032b6103268461019b565b61030d565b61019b565b9050919050565b5f819050919050565b61034983610316565b61035d61035582610337565b8484546102bc565b825550505050565b5f5f905090565b610374610365565b61037f818484610340565b505050565b5b818110156103a2576103975f8261036c565b600181019050610385565b5050565b601f8211156103e7576103b88161028f565b6103c1846102a1565b810160208510156103d0578190505b6103e46103dc856102a1565b830182610384565b50505b505050565b5f82821c905092915050565b5f6104075f19846008026103ec565b1980831691505092915050565b5f61041f83836103f8565b9150826002028217905092915050565b61043882610228565b67ffffffffffffffff81111561045157610450610077565b5b61045b825461025f565b6104668282856103a6565b5f60209050601f831160018114610497575f8415610485578287015190505b61048f8582610414565b8655506104f6565b601f1984166104a58661028f565b5f5b828110156104cc578489015182556001820191506020850194506020810190506104a7565b868310156104e957848901516104e5601f8916826103f8565b8355505b6001600288020188555050505b505050505050565b6103b08061050b5f395ff3fe608060405234801561000f575f5ffd5b506004361061004a575f3560e01c806339ff9f9c1461004e5780636356a41e1461006d578063e652e5651461008b578063ef5fb05b146100a9575b5f5ffd5b6100566100c7565b6040516100649291906102b6565b60405180910390f35b610075610160565b60405161008291906102e4565b60405180910390f35b610093610166565b6040516100a091906102fd565b60405180910390f35b6100b16101f1565b6040516100be91906102fd565b60405180910390f35b60605f5f6001548180546100da9061034a565b80601f01602080910402602001604051908101604052809291908181526020018280546101069061034a565b80156101515780601f1061012857610100808354040283529160200191610151565b820191905f5260205f20905b81548152906001019060200180831161013457829003601f168201915b50505050509150915091509091565b60015481565b5f80546101729061034a565b80601f016020809104026020016040519081016040528092919081815260200182805461019e9061034a565b80156101e95780601f106101c0576101008083540402835291602001916101e9565b820191905f5260205f20905b8154815290600101906020018083116101cc57829003601f168201915b505050505081565b60606040518060400160405280601181526020017f48656c6c6f2066726f6d204368696c6421000000000000000000000000000000815250905090565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6102708261022e565b61027a8185610238565b935061028a818560208601610248565b61029381610256565b840191505092915050565b5f819050919050565b6102b08161029e565b82525050565b5f6040820190508181035f8301526102ce8185610266565b90506102dd60208301846102a7565b9392505050565b5f6020820190506102f75f8301846102a7565b92915050565b5f6020820190508181035f8301526103158184610266565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061036157607f821691505b6020821081036103745761037361031d565b5b5091905056fea26469706673582212206ec0b3d2ad0ababeaf05ccde53c629911eefc3402ea49130122b80903e87428264736f6c634300081c0033";

  
      type ParentConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: ParentConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class Parent__factory extends ContractFactory {
    
      constructor(...args: ParentConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(_name: string, _balance: BigNumberish, overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(_name, _balance, overrides || {});
    };
    override deploy(_name: string, _balance: BigNumberish, overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(_name, _balance, overrides || {}) as Promise<Parent & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): Parent__factory {
      return super.connect(runner) as Parent__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): ParentInterface {
      return new Interface(_abi) as ParentInterface;
    }
    
    override attach(address: string | Addressable): Parent {
      return super.attach(address) as Parent;
    }
  static connect(address: string, runner?: ContractRunner | null): Parent {
      return new Contract(address, _abi, runner) as unknown as Parent;
    }
  }

  
  